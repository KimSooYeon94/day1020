
.replace(a,b)
	=>String문자열 중에서 a를 찾아 b로 변환한 새로운 문자열을 반환하는 메소드
	

--------------------------------------------------------------------

String [] split(String 정규표현식)
	=> 문자열데이터를 정규표현식에 따라 분리하여 분리된 문자열의 배열을 반환하는 메소드
	
	StringTokenizer클래스를 이용하여
	문자열을 분리할 수도 있다!
	
	
--------------------------------------------------------------------
boolean startsWith(String prefix)
	=> 문자열데이터 특정 문자열로 시작하는지 판별하여 true, false를 반환하는 메소드
boolean endsWith(String suffix) 
	=> 문자열데이터가 특정 문자열로 끝나는지 판별하여 true, false를 반환하는 메소드
	
	
--------------------------------------------------------------------
String toLowerCase()
	=> 문자열데이터를 모두 소문자로 변환한 새로운 문자열을 반환하는 메소드
	
String toUpperCase()
	=> 문자열데이터를 모두 대문자로 변환한 새로운 문자열을 반환하는 메소드

--------------------------------------------------------------------
static String valueOf(기본자료형 변수)
	=> 기본자료형의 값(변수의 값)을 String으로 만들어 반환하는 메소드
	
	int data = 2021;

	정수형 데이터를 문자열로 만들어야 하는 상황이라면
	
	String result = String.valueOf(data);
	
		
	valueOf 메소드를 이용하는 대신에 다음과 같이 표현할 수도 있다
	
	String result = data + "";
	
	어떤 자료형이던지 + 문자열
	로 하면 문자열이 된다

--------------------------------------------------------------------

자바에서는 문자열 처리를 위하여
	String, StringBuffer, StringBuilder 클래스를 제공한다
	
	String은 변하지 않는 문자열 처리에 적합하고
	StringBuffer와 StringBuilder는 변하는 문자열 처리에 사용한다
	
--------------------------------------------------------------------
<< StringBuffer의 주요메소드 >>

	append()
		문자열데이터 데이터 맨 뒤에 새로운 문자열이나 데이터를 추가하는 메소드
		String처럶 새로운 메모리가 잡히는 것이 아니라
		객체 자신이 변경된다
		
	toString()
		StringBuffer의 데이터를 String문자열로 만들어주는 메소드
		*** 문자열을 매개변수로 갖는 메소드들은 대부분 String을 매개변수로 갖도록 되어있다
		그래서 StringBuffer를 이용하여 변하는 문자열을 처리한 뒤에
		문자열을 매개변수로 갖는 메소드를 사용하기 위해서는 toString 메소드를 이용하여
		String으로 변환해야 한다
		
		
	deleteCharAt(int index)
		=> 매개변수로 전달받은 index위치의 문자를 삭제하는 메소드
			
	delete(int start, int end)
		=> start 위치에서부터 end-1까지의 문자열을 삭제하는 메소드		
		
--------------------------------------------------------------------
	reverse();
		=> 문자열 순서를 거꾸로 뒤바꿔주는 메소드		
		
--------------------------------------------------------------------
<< 날짜에 시간에 대한 클래스 >>

java.util.Data					자바초기부터 있던 클래스이며, 년도에 1900울 더해서 사용 

java.util.Calendar				추상클래스이마 직접 객체를 생성할 수 없으며 getInstence	메소드를 통해서 사용
									객체를 생성할 수 있다
								연도에 1900을 더하지 않아도 된다	

java.util.GregorianCalendar		Calendar 클래스의 자식 클래스이며
									객체를 직접 생성할 수 있다		
		
		
			












	
	
	










			